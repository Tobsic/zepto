(define-struct tree (left right val))

(define (tree:leaf? tree)
  (and (nil? (tree:get-left tree)) (nil? (tree:get-right tree))))

(define (tree:make-leaf val)
  (tree:make-tree (nil) (nil) val))

(define (tree:size tree)
  (if (not (tree:tree? tree))
    0
    (if (tree:leaf? tree)
      1
      (+ 1 (tree:size (tree:get-right tree)) (tree:size (tree:get-left tree))))))

(define (tree:depth tree)
  (if (not (tree:tree? tree))
    0
    (if (tree:leaf? tree)
      1
      (let ((ldep (tree:depth (tree:get-left tree)))
            (rdep (tree:depth (tree:get-right tree))))
        (if (> ldep rdep)
          (+ 1 ldep)
          (+ 1 rdep))))))

(defimpl stringify tree:tree?
         ((->string (lambda (t) (if (tree:leaf? t) (++ "Leaf<" (->string (tree:get-val t)) ">")
                                                   (++ "Tree<" (->string (tree:get-left t))
                                                       ", " (->string (tree:get-val t))
                                                       ", " (->string (tree:get-right t))
                                                       ">"))))))
