(load "srfi/srfi-9.zp")

(define-record-type tree
    (tree:make-tree left right val)
    tree:tree?
    (left tree:get-left tree:set-left)
    (right tree:get-right tree:set-right)
    (val tree:get-val tree:set-val))

(define (tree:leaf? tree)
  (and (null? (tree:get-left tree)) (null? (tree:get-right tree))))

(define (tree:make-leaf val)
  (tree:make-tree (nil) (nil) val))

(define (tree:size tree)
  (if (not (tree:tree? tree))
    0
    (if (tree:leaf? tree)
      1
      (+ 1 (tree:size (tree:get-right tree)) (tree:size (tree:get-left tree))))))

(define (tree:depth tree)
  (if (not (tree:tree? tree))
    0
    (if (tree:leaf? tree)
      1
      (let ((ldep (tree:depth (tree:get-left tree)))
            (rdep (tree:depth (tree:get-right tree))))
        (if (> ldep rdep)
          (+ 1 ldep)
          (+ 1 rdep))))))
